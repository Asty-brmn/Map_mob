import React, { useState } from 'react';
import { StyleSheet, View, Alert, TouchableOpacity, Text } from 'react-native';
import { useRouter } from 'expo-router';
import Map from '../components/Map';
import MarkerList from '../components/MarkerList';
import { MarkerData } from '../types';

// –ù–∞—á–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const initialMarkers: MarkerData[] = [
  {
    id: '1',
    title: '–ü–µ—Ä–º—å, —Ü–µ–Ω—Ç—Ä',
    coordinate: {
      latitude: 58.010455,
      longitude: 56.229443,
    },
    images: [],
    createdAt: new Date(),
  },
  {
    id: '2',
    title: '–ü–µ—Ä–º—å, —Ç–æ—á–∫–∞ 2',
    coordinate: {
      latitude: 58.010475,
      longitude: 56.229963,
    },
    images: [],
    createdAt: new Date(),
  },
];

/**
 * –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ö–∞—Ä—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ä—Ç—É –∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 */
export default function Index() {
  const [markers, setMarkers] = useState<MarkerData[]>(initialMarkers);
  const [activeTab, setActiveTab] = useState<'map' | 'list'>('map');
  const router = useRouter();

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –¥–æ–ª–≥–æ–º—É –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–∞—Ä—Ç—É
   */
  const handleMapLongPress = (coordinate: { latitude: number; longitude: number }) => {
    try {
      const newMarker: MarkerData = {
        id: Date.now().toString(),
        title: `–ú–∞—Ä–∫–µ—Ä ${markers.length + 1}`,
        coordinate: {
          latitude: coordinate.latitude,
          longitude: coordinate.longitude,
        },
        images: [],
        createdAt: new Date(),
      };

      setMarkers(prevMarkers => [...prevMarkers, newMarker]);
      console.log('–ù–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω:', newMarker);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä');
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—è–º
   */
  const handleMarkerPress = (marker: MarkerData) => {
    try {
      router.push({
        pathname: '/marker/[id]',
        params: { id: marker.id }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ä–∫–µ—Ä–∞');
    }
  };

  return (
    <View style={styles.container}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ–π –∏ —Å–ø–∏—Å–∫–æ–º */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'map' && styles.activeTab]}
          onPress={() => setActiveTab('map')}
        >
          <Text style={[styles.tabText, activeTab === 'map' && styles.activeTabText]}>
            üó∫Ô∏è –ö–∞—Ä—Ç–∞
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'list' && styles.activeTab]}
          onPress={() => setActiveTab('list')}
        >
          <Text style={[styles.tabText, activeTab === 'list' && styles.activeTabText]}>
            üìã –°–ø–∏—Å–æ–∫
          </Text>
        </TouchableOpacity>
      </View>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      {activeTab === 'map' ? (
        <Map
          markers={markers}
          onMarkerPress={handleMarkerPress}
          onMapLongPress={handleMapLongPress}
        />
      ) : (
        <MarkerList
          markers={markers}
          onMarkerPress={handleMarkerPress}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#f8f8f8',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
  },
  activeTab: {
    backgroundColor: '#71a7e0ff',
  },
  tabText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#666',
  },
  activeTabText: {
    color: '#fff',
  },
});